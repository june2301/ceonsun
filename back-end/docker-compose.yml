services:
  chunsun-db:
    image: mysql:8.0
    container_name: chunsun-db
    restart: always
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      MYSQL_USER: "${MYSQL_USER}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
    ports:
      - "3306:3306"
    volumes:
      - ./db/init-mysql:/docker-entrypoint-initdb.d
      - mysql_data:/var/lib/mysql
    command: --skip-character-set-client-handshake
    networks:
      - chunsun-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-db:
    image: mongo:6.0
    container_name: mongo-db
    restart: always
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_INITDB_ROOT_USERNAME}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_INITDB_ROOT_PASSWORD}"
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./db/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - chunsun-network
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand({ ping: 1 }).ok"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-redis:
    image: redis:7.0
    container_name: auth-redis-db
    restart: always
    ports:
      - "6378:6379"
    networks:
      - chunsun-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    env_file:
      - .env
    environment:
      spring.cloud.config.username: "${RABBITMQ_DEFAULT_USER}"
      spring.cloud.config.password: "${RABBITMQ_DEFAULT_PASS}"
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - chunsun-network
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5

  config-service:
    container_name: config-service
    build:
      context: ./config-service
      dockerfile: Dockerfile
    ports:
      - "8889:8889"
    env_file:
      - .env
    environment:
      spring.rabbitmq.host: rabbitmq
      SPRING_SECURITY_USER_NAME: "${CONFIG_USER}"
      SPRING_SECURITY_USER_PASSWORD: "${CONFIG_PASSWORD}"
      ENCRYPT_KEY: "${ENCRYPT_KEY}"
    networks:
      - chunsun-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f -u ${CONFIG_USER}:${CONFIG_PASSWORD} http://localhost:8889/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  discovery-service:
    container_name: discovery-service
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    env_file:
      - .env
    environment:
      spring.cloud.config.username: "${CONFIG_USER}"
      spring.cloud.config.password: "${CONFIG_PASSWORD}"
    networks:
      - chunsun-network
    depends_on:
      config-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  gateway-service:
    container_name: gateway-service
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      spring.cloud.config.username: "${CONFIG_USER}"
      spring.cloud.config.password: "${CONFIG_PASSWORD}"
    networks:
      - chunsun-network
    depends_on:
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-service:
    container_name: auth-service
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      spring.cloud.config.username: "${CONFIG_USER}"
      spring.cloud.config.password: "${CONFIG_PASSWORD}"
    networks:
      - chunsun-network
    depends_on:
      chunsun-db:
        condition: service_healthy
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
      auth-redis:
        condition: service_healthy

  member-service:
    container_name: member-service
    build:
      context: ./member-service
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      spring.cloud.config.username: "${CONFIG_USER}"
      spring.cloud.config.password: "${CONFIG_PASSWORD}"
      spring.cloud.aws.credentials.access-key: "${AWS_ACCESS_KEY_ID}"
      spring.cloud.aws.credentials.secret-key: "${AWS_SECRET_ACCESS_KEY}"
      spring.cloud.aws.region.static: "${AWS_REGION}"
      spring.cloud.aws.s3.bucket: "${AWS_BUCKET}"
    networks:
      - chunsun-network
    depends_on:
      chunsun-db:
        condition: service_healthy
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy

  coupon-redis:
    container_name: coupon-redis
    image: redis
    ports:
      - "6379:6379"
    networks:
      - chunsun-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      retries: 5

  coupon-service:
    container_name: coupon-service
    build:
      context: ./coupon-service
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      spring.cloud.config.username: "${CONFIG_USER}"
      spring.cloud.config.password: "${CONFIG_PASSWORD}"
    networks:
      - chunsun-network
    depends_on:
      chunsun-db:
        condition: service_healthy
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy

  coupon-kafka-service:
    container_name: coupon-kafka-service
    build:
      context: ./coupon-kafka-service
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      spring.cloud.config.username: "${CONFIG_USER}"
      spring.cloud.config.password: "${CONFIG_PASSWORD}"
    networks:
      - chunsun-network
    depends_on:
      chunsun-db:
        condition: service_healthy
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy

  rank-redis:
    image: redis:7.0
    container_name: rank-redis
    restart: always
    ports:
      - "6377:6379"
    networks:
      - chunsun-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]

  rank-service:
    container_name: rank-service
    build:
      context: ./rank-service
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      spring.cloud.config.username: "${CONFIG_USER}"
      spring.cloud.config.password: "${CONFIG_PASSWORD}"
    networks:
      - chunsun-network
    depends_on:
      chunsun-db:
        condition: service_healthy
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy

  payment-service:
    container_name: payment-service
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      spring.cloud.config.username: "${CONFIG_USER}"
      spring.cloud.config.password: "${CONFIG_PASSWORD}"
    networks:
      - chunsun-network
    depends_on:
      chunsun-db:
        condition: service_healthy
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy

  class-service:
    container_name: class-service
    build:
      context: ./class-service
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      spring.cloud.config.username: "${CONFIG_USER}"
      spring.cloud.config.password: "${CONFIG_PASSWORD}"
      OPENVIDU_SECRET: "${OPENVIDU_SECRET}"
      OPENVIDU_URL: "${OPENVIDU_URL}"
    networks:
      - chunsun-network
    depends_on:
      chunsun-db:
        condition: service_healthy
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy

  chat-service:
    container_name: chat-service
    build:
      context: ./chat-service
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      spring.cloud.config.username: "${CONFIG_USER}"
      spring.cloud.config.password: "${CONFIG_PASSWORD}"
      MONGO_USERNAME: "${MONGO_USERNAME}"
      MONGO_PASSWORD: "${MONGO_PASSWORD}"
    networks:
      - chunsun-network
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
      mongo-db:
        condition: service_healthy
      chunsun-db:
        condition: service_healthy

  chat-consumer:
    container_name: chat-consumer
    build:
      context: ./chat-consumer
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      spring.cloud.config.username: "${CONFIG_USER}"
      spring.cloud.config.password: "${CONFIG_PASSWORD}"
      MONGO_USERNAME: "${MONGO_USERNAME}"
      MONGO_PASSWORD: "${MONGO_PASSWORD}"
    networks:
      - chunsun-network
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
      mongo-db:
        condition: service_healthy

  notification-service:
    container_name: notification-service
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      spring.cloud.config.username: "${CONFIG_USER}"
      spring.cloud.config.password: "${CONFIG_PASSWORD}"
      MONGO_USERNAME: "${MONGO_USERNAME}"
      MONGO_PASSWORD: "${MONGO_PASSWORD}"
    networks:
      - chunsun-network
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
      mongo-db:
        condition: service_healthy


  ############################
  # Kafka & Zookeeper 설정 추가
  ############################

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - chunsun-network
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka1
    restart: always
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"  # 내부 통신
      - "29092:29092" # 외부 접근
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - chunsun-network

  kafka2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka2
    restart: always
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9093:9092"  # 내부 통신
      - "29093:29092" # 외부 접근
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:9092,EXTERNAL://kafka2:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - chunsun-network

  kafka3:
    image: confluentinc/cp-kafka:latest
    container_name: kafka3
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9094:9092"
      - "29094:29092"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:9092,EXTERNAL://kafka3:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - chunsun-network

  kafka-init:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-init
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    entrypoint: [ "/bin/sh", "-c" ]
    command: >
      "sleep 20 &&
        kafka-topics --create --bootstrap-server kafka1:9092 --replication-factor 1 --partitions 1 --topic chat || true &&
        kafka-topics --create --bootstrap-server kafka1:9092 --replication-factor 1 --partitions 1 --topic coupon || true &&
        kafka-topics --create --bootstrap-server kafka1:9092 --replication-factor 1 --partitions 1 --topic alarm || true"
    networks:
      - chunsun-network

volumes:
  mysql_data:
  mongo_data:

networks:
  chunsun-network:
    driver: bridge